{
  "name": "AppMon",
  "tagline": "",
  "body": "Welcome to AppMon!\r\n==================\r\n\r\nThis project was only possible because of **Ole André Vadla Ravnås** and I dedicate it to him.\r\n\r\n\r\nFollow him on [**GitHub**](https://github.com/oleavr), [**Twitter**](https://twitter.com/oleavr)\r\n\r\n_TL;DR_\r\nAppMon is an automated framework for monitoring and tampering system API calls of native iOS and Android apps. You may call it the [**GreaseMonkey**](https://en.wikipedia.org/wiki/Greasemonkey) for native mobile apps. ;-)\r\n\r\n----------\r\n\r\nMotivation\r\n-------------\r\n\r\nBeing a big fan of the Sysinternals Suite (acquired by Microsoft) and the recent spike in the number of mobile app releases we see an increase in Mobile app security assessments and the lack of toolset for doing it easily and thoroughly, easily, became the motivation for this idea. \r\n\r\nAppMon is my vision is to make become the iOS/Android equivalent of the this project [**apimonitor**](http://www.rohitab.com/apimonitor) and [**GreaseMonkey**](https://en.wikipedia.org/wiki/Greasemonkey). This should become a useful tool for the mobile penetration testers to not only monitor the app’s overall activity and focus on things that seem suspicious, as a starting point but also use pre-defined user-scripts to modify the app’s functionality/logic in the runtime e.g. spoofing the DeviceID, spoofing the GPS co-ordinates, faking In-App purchases etc. \r\n\r\nAnd as the tool matures, with time (i.e. as I get more spare time) we can have even more refinement as to add pattern detection into this monitoring where we can tag/classify the data (e.g. PII etc.) \r\n\r\nDynamic instrumentation of native mobile apps is not something new to us, there are tools, available since 2011, to do one or the other thing. But the tools I have used so far are not as flexible as it is to do with Frida i.e. extending the capabilities and adding new features is very hard and cumbersome process with similar alternatives. And more over most of them are very tightly bound to a specific version of the mobile OS.\r\n\r\nSo far I have grouped the methods of interesting classes into logical categories of APIs that I’m going to intercept/manipulate into e.g.\r\n> **Categories:**\r\n> - Disk I/O (R/W)\r\n> - Network (HTTP GET, POST etc.)\r\n> - Crypto (HMAC, Hash function, block ciphers, X.509 certs etc.)\r\n> - XML/JSON\r\n> - KeyChain\r\n> - Database (e.g. SQLite)\r\n> - WebView\r\n> - UserDefaults (SharedPreferences equiv.) & more.\r\n\r\nIn the current release, we have the ability to hook both the Apple’s CoreFoundation API’s as well as the Objective-C methods (even if its done in a Swift app via the bridging header). Swift support is not yet available in frida-gum and hence we'll have to wait until then. All I want to from you all is to watch the Video Demo (link above), take a look at the source-code and then provide your feedbacks/comments/suggestions/rants. And also it would be really helpful if you can provide me and missing feature you would like to see in the tool.\r\n\r\n\r\nUsage\r\n-------------\r\n\r\n####AppMon Sniffer\r\n```\r\nusage: appmon.py [-h] [-a APP_NAME] [-p PLATFORM] [-s SCRIPT_PATH]\r\n                 [-o OUTPUT_DIR] [-ls LIST_APPS] [-v]\r\n\r\noptional arguments:\r\n  -h, --help      show this help message and exit\r\n  -a APP_NAME     Process Name; Accepts \"Twitter\" for iOS;\r\n                  \"com.twitter.android\" for Android; \"Twitter\" for MacOS X\r\n  -p PLATFORM     Platform Type; Accepts \"ios\", \"android\" or \"mac\"\r\n  -s SCRIPT_PATH  Path to agent script file; Can be relative/absolute path for\r\n                  a file or directory; Multiple scripts in a directory shall\r\n                  be merged; Needs \"-a APP_NAME\"\r\n  -o OUTPUT_DIR   (Optional) Path to store any dumps/logs; Accepts\r\n                  relative/absolute paths\r\n  -ls LIST_APPS   Optional; Accepts 1 or 0; Lists running Apps on target\r\n                  device; Needs \"-p PLATFORM\"\r\n  -v              show program's version number and exit\r\n```\r\n-----\r\n####AppMon Intruder\r\n```\r\nusage: appintruder.py [-h] [-a APP_NAME] [-p PLATFORM] [-ls LIST_APPS]\r\n                      [-s SCRIPT_PATH] [-v]\r\n\r\noptional arguments:\r\n  -h, --help      show this help message and exit\r\n  -a APP_NAME     Process Identifier; Accepts \"Twitter\" for iOS;\r\n                  \"com.twitter.android\" for Android; \"Twitter\" for MacOS X\r\n  -p PLATFORM     Platform Type; Accepts \"ios\", \"android\" or \"mac\"\r\n  -ls LIST_APPS   Optional; Accepts 1 or 0; Lists running Apps on target\r\n                  device; Needs \"-p PLATFORM\"\r\n  -s SCRIPT_PATH  Path to agent script file; Can be relative/absolute path for\r\n                  a file or directory; Multiple scripts in a directory shall\r\n                  be merged; Needs \"-a APP_NAME\"\r\n  -v              show program's version number and exit\r\n```\r\n----------\r\n\r\n\r\nScreenshots\r\n-------------------\r\n\r\n\r\n![Screenshot#1](https://raw.githubusercontent.com/dpnishant/appmon/master/screenshots/1.png?raw=true \"Screenshot#1\")\r\n\r\n\r\n\r\n![Screenshot#2](https://raw.githubusercontent.com/dpnishant/appmon/master/screenshots/2.png?raw=true \"Screenshot#2\")\r\n\r\n\r\n\r\n![Screenshot#3](https://raw.githubusercontent.com/dpnishant/appmon/master/screenshots/3.png?raw=true \"Screenshot#3\")\r\n\r\n\r\n\r\n![Screenshot#4](https://raw.githubusercontent.com/dpnishant/appmon/master/screenshots/4.png?raw=true \"Screenshot#4\")\r\n\r\n\r\nVideo(s)\r\n------------------\r\n\r\n###TouchID Bypass using AppMon Intruder\r\n\r\n[![TouchID Bypass using AppMon Intruder](https://img.youtube.com/vi/ECnkgz3jnPM/0.jpg)](https://youtu.be/ECnkgz3jnPM)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}